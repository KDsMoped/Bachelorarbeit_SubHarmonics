/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "SignalProcessingHelpers.h"

#ifndef M_PI
#define M_PI    3.14159265358979323846f
#endif

//==============================================================================
/**
*/
class PrototypeAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    PrototypeAudioProcessor();
    ~PrototypeAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;
	void reset() override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;
    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

	//==============================================================================
	// List of Parameters
	AudioProcessorParameter *paramMasterBypass;
	AudioProcessorParameter *paramSoloSub;
	AudioProcessorParameter *paramSwitchFilter;
	AudioProcessorParameter *paramInputGain;
	AudioProcessorParameter *paramPreSubGain;
	AudioProcessorParameter *paramBpFreq;
	AudioProcessorParameter *paramBpQ;
	AudioProcessorParameter *paramLpfFreq;
	AudioProcessorParameter *paramHpfFreq;
	AudioProcessorParameter *paramDecay;
	AudioProcessorParameter *paramHyst;
	AudioProcessorParameter *paramColour;
	AudioProcessorParameter *paramDirectGain;
	AudioProcessorParameter *paramPostSubGain;
	AudioProcessorParameter *paramOutputGain;

private:
	//==============================================================================
	BiquadFilter *biquadPreSubBPF;
	BiquadFilter *biquadPreSubHPF;
	BiquadFilter *biquadPreSubLPF;
	BiquadFilter *biquadPreTriggerLPF;
	BiquadFilter *biquadCompAPF;
	BiquadFilter *biquadTriggerAPF;
	BiquadFilter *biquadPostSubLPF;
	BiquadFilter *biquadPostSubHPF;
	
	Ramper *ramper;

	float vc;
	int sign;
	float signumGain;
	int schmittTriggerStatus;
	int triggerChangeCount;
	float yk1;

	//==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PrototypeAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
