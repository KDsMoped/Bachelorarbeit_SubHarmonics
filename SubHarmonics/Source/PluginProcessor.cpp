/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


class FloatParameter : public AudioProcessorParameter {
public:

	FloatParameter(float defaultValue, int numSteps, const String& name)
		: defaultValue(defaultValue),
		value(defaultValue),
		numSteps(numSteps),
		name(name) {
	}

	float getValue() const override {
		return value;
	}

	void setValue(float newValue) override {
		value = newValue;
	}

	float getDefaultValue() const override {
		return defaultValue;
	}

	int getNumSteps() const override {
		if (numSteps > 1) {
			return numSteps;
		}
		else {
			return AudioProcessor::getDefaultNumParameterSteps();
		}
	}

	String getName(int /* maximumStringLength */) const override {
		return name;
	}

	String getLabel() const override {
		return String();
	}

	float getValueForText(const String& text) const override {
		return text.getFloatValue();
	}

private:
	float defaultValue, value;
	int numSteps;
	String name;
};

const float defaultMasterBypass = 0.f;
const float defaultSoloSub = 0.f;
const float defaultInputGain = 0.5f;
const float defaultOutputGain = 0.5f;
const float defaultSubPreGain = 1.f;
const float defaultHpfFreq = 900;// 84.f;
const float defaultLpfFreq = 1100;// 126.f;

//==============================================================================
PrototypeAudioProcessor::PrototypeAudioProcessor() : biquadPreSubHPF(new BiquadFilter(filterTypeHighPass, filterOrder4)),
													 biquadPreSubLPF(new BiquadFilter(filterTypeLowPass, filterOrder4)),
													 biquadSmoothingFilter(new BiquadFilter(filterTypeLowPass, filterOrder6)),
													 biquadPostSubLPF(new BiquadFilter(filterTypeLowPass, filterOrder4))
													 {
	// Set up our parameters. The base class will delete them for us.
	addParameter(masterBypass = new FloatParameter(defaultMasterBypass, 2, "Master Bypass"));
	addParameter(soloSub = new FloatParameter(defaultSoloSub, 2, "Solo Sub"));
	addParameter(inputGain = new FloatParameter(defaultInputGain, 0, "Input Gain"));
	addParameter(outputGain = new FloatParameter(defaultOutputGain, 0, "Output Gain"));
	addParameter(subPreGain = new FloatParameter(defaultSubPreGain, 0, "Sub Pre Gain"));
	addParameter(hpfFreq = new FloatParameter(defaultHpfFreq, 0, "HPF Frequency"));
	addParameter(lpfFreq = new FloatParameter(defaultLpfFreq, 0, "LPF Frequency"));
}

PrototypeAudioProcessor::~PrototypeAudioProcessor() {
}

//==============================================================================
const String PrototypeAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

/*
int PrototypeAudioProcessor::getNumParameters()
{
    return 0;
}

float PrototypeAudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void PrototypeAudioProcessor::setParameter (int index, float newValue)
{
}

const String PrototypeAudioProcessor::getParameterName (int index)
{
    return String();
}

const String PrototypeAudioProcessor::getParameterText (int index)
{
    return String();
}
*/

const String PrototypeAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PrototypeAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PrototypeAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool PrototypeAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool PrototypeAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PrototypeAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PrototypeAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PrototypeAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PrototypeAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PrototypeAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PrototypeAudioProcessor::setCurrentProgram (int index)
{
}

const String PrototypeAudioProcessor::getProgramName (int index)
{
    return String();
}

void PrototypeAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PrototypeAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..

	// Calculate static filter coefficients
	biquadSmoothingFilter->setFilterCoeffs(getSampleRate(), 10, 0.77);
	biquadPostSubLPF->setFilterCoeffs(getSampleRate(), 400, 0.77);
	
	// Reset envelope detector capacitor voltage
	vc = 0;

	triggerChangeCount = 0;
	sign = 1;
	schmittTriggerStatus = 0;
	yk1 = 0;

	// Clearing buffers
}

void PrototypeAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PrototypeAudioProcessor::reset()
{
	// Use this method as the place to clear any delay lines, buffers, etc, as it
	// means there's been a break in the audio's continuity.
	
	// Reset envelope detector capacitor voltage
	vc = 0;

	triggerChangeCount = 0;
	sign = 1;
	schmittTriggerStatus = 0;
	yk1 = 0;
	
	// Clearing buffers

}

void PrototypeAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
	const int numSamples = buffer.getNumSamples();

    // Clearing obsolete output channels
	for(int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
		buffer.clear(i, 0, numSamples);
	}


	float monoData[4096];

	for (int i = 0; i < getBlockSize(); i++) {
		monoData[i] = 0;
	}

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
	
	for (int ch = 0; ch < getNumInputChannels(); ++ch) {
		// Retrieve pointers to modify each buffers channel data
		float* channelData = buffer.getWritePointer(ch);
		
		for (int i = 0; i < getBlockSize(); i++) {
			// Check if bypassed
			if (masterBypass->getValue() == 0) {
				// Apply Input Gain
				channelData[i] *= inputGain->getValue();
			
				// Mono Sum
				monoData[i] += (channelData[i] / 2);
			}
		}
	}
				

	for (int i = 0; i < getBlockSize(); i++) {
		// Check if bypassed
		if (masterBypass->getValue() == 0) {
			// Store current sample value in buffers for the various signal paths
			float drySignalBufferedSample = monoData[i];
			float effectBufferedSample = monoData[i];

			// Applay Sub Pre Gain
			//effectBufferedSample *= subPreGain->getValue();

			// Forking effect signal paths
			float rectifierBufferedSample = effectBufferedSample;
			float triggerBufferedSample = effectBufferedSample;


			//Envelope Detector
			double dt = 1. / getSampleRate();
			float rc = 100.e-3; // X ms release time
			double coeff = rc / (rc + dt);

			rectifierBufferedSample = vc;
			double y = effectBufferedSample;
			double rect = fabs(y); // Rectifier(diodes)
			vc = (rect > vc ? rect : coeff*vc);


			// Summing Unit
			effectBufferedSample = (effectBufferedSample + rectifierBufferedSample);

			// Square Root Extractor
			if (effectBufferedSample < 0) {
				effectBufferedSample = 0.f;
			}
			effectBufferedSample = sqrt(effectBufferedSample);

			/*
			// TODO: Signal Conditioning
			// Pre Sub HPF
			biquadPreSubHPF->setFilterCoeffs(getSampleRate(), hpfFreq->getValue(), 0.77);
			biquadPreSubHPF->processFilter(&triggerBufferedSample, ch);

			// Pre Sub LPF
			biquadPreSubLPF->setFilterCoeffs(getSampleRate(), lpfFreq->getValue(), 0.77);
			biquadPreSubLPF->processFilter(&triggerBufferedSample, ch);
			*/

			// First Order Lowpass Filter to shift the signal by 90°
			float f0 = 200;
			float tau = 1 / (2 * M_PI * f0);
			float c = tau / dt;
			float xk = triggerBufferedSample;
			float yk = (1. / (1. + c)) * (xk + (c * yk1));
			yk1 = yk;
			triggerBufferedSample = yk;


			// Trigger Circuit
			// Schmitt-Trigger
			float posHyst = .0f;
			float negHyst = posHyst * -1;

			/*
			if (i == 0) {
			if (triggerBufferedSample > 0.f) { schmittTriggerStatus = 1; }
			else { schmittTriggerStatus = 0; }
			}
			*/
			if (triggerBufferedSample > posHyst) {
				if (schmittTriggerStatus == 0) {
					schmittTriggerStatus = 1;
					triggerChangeCount++;
				}
			}
			if (triggerBufferedSample < negHyst) {
				if (schmittTriggerStatus == 1) {
					schmittTriggerStatus = 0;
					triggerChangeCount++;
				}
			}

			// TODO: Counter
			if (triggerChangeCount == 2) {
				sign *= -1;
				triggerChangeCount = 0;
			}

			// TODO: Variable Amplifier
			effectBufferedSample *= sign;

			// TODO: Post Filter
			biquadPostSubLPF->processFilter(&effectBufferedSample, 0);

			// TODO: Mixing Amplifier
			//channelData[i] = (effectBufferedSample + drySignalBufferedSample) / 2;


			//channelData[i] = (ch == 0 ? triggerBufferedSample:effectBufferedSample);
			monoData[i] = effectBufferedSample;
		}
	}

	for (int ch = 0; ch < getNumInputChannels(); ++ch) {
		// Retrieve pointers to modify each buffers channel data
		float* channelData = buffer.getWritePointer(ch);

		for (int i = 0; i < getBlockSize(); i++) {
			// Check if bypassed
			if (masterBypass->getValue() == 0) {
				// Apply Output Gain
				channelData[i] = outputGain->getValue() * monoData[i];
			}
			else {
				// TODO: Apply Latency...
			}
		}
	}
}

//==============================================================================
bool PrototypeAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PrototypeAudioProcessor::createEditor()
{
    return new PrototypeAudioProcessorEditor (*this);
}

//==============================================================================
void PrototypeAudioProcessor::getStateInformation (MemoryBlock& destData)
{
	// You should use this method to store your parameters in the memory block.
	
	// Create an outer XML element..
	XmlElement xml("MYPLUGINSETTINGS");

	// add some attributes to it..
	xml.setAttribute("master_bypass", masterBypass->getValue());
	xml.setAttribute("solo_sub", soloSub->getValue());
	xml.setAttribute("input_gain", inputGain->getValue());
	xml.setAttribute("output_gain", outputGain->getValue());
	xml.setAttribute("sub_pre_gain", subPreGain->getValue());
	xml.setAttribute("hpf_frequency", hpfFreq->getValue());
	xml.setAttribute("lpf_frequency", lpfFreq->getValue());

	// then use this helper function to stuff it into the binary blob and return it..
	copyXmlToBinary(xml, destData);
}

void PrototypeAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.

	// This getXmlFromBinary() helper function retrieves our XML from the binary blob..
	ScopedPointer<XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));

	if (xmlState != nullptr)
	{
		// make sure that it's actually our type of XML object..
		if (xmlState->hasTagName("MYPLUGINSETTINGS"))
		{
			// ok, now pull out our parameters..
			masterBypass->setValue((float)xmlState->getDoubleAttribute("master_bypass", masterBypass->getValue()));
			soloSub->setValue((float)xmlState->getDoubleAttribute("solo_sub", soloSub->getValue()));
			inputGain->setValue((float)xmlState->getDoubleAttribute("input_gain", inputGain->getValue()));
			outputGain->setValue((float)xmlState->getDoubleAttribute("output_gain", outputGain->getValue()));
			subPreGain->setValue((float)xmlState->getDoubleAttribute("sub_pre_gain", subPreGain->getValue()));
			hpfFreq->setValue((float)xmlState->getDoubleAttribute("hpf_frequency", hpfFreq->getValue()));
			lpfFreq->setValue((float)xmlState->getDoubleAttribute("lpf_frequency", lpfFreq->getValue()));
		}
	}
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PrototypeAudioProcessor();
}
