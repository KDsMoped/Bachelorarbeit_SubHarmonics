/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
PrototypeAudioProcessorEditor::PrototypeAudioProcessorEditor(PrototypeAudioProcessor& owningProcessor)
	: AudioProcessorEditor(owningProcessor) {

    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (650, 310);

	// Set properties for Master Bypass Button
	masterBypassButton.addListener(this);
	masterBypassButton.setButtonText("Master Bypass");

	// Set properties for Solo Sub Button
	soloSubButton.addListener(this);
	soloSubButton.setButtonText("Solo Sub");

	// Set properties for the Input Gain Slider
	inputGainSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	inputGainSlider.setRange(0.0, 1.0, 0.01);
	inputGainSlider.setSliderSnapsToMousePosition(false);
	inputGainSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	inputGainSlider.setTextValueSuffix(" Volume");
	inputGainSlider.addListener(this);
	// Set properties for the Input Gain Label
	inputGainLabel.setText("Input Volume", NotificationType::dontSendNotification);

	// Set properties for the Output Gain Slider
	outputGainSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	outputGainSlider.setRange(0.0, 1.0, 0.01);
	outputGainSlider.setSliderSnapsToMousePosition(false);
	outputGainSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	outputGainSlider.setTextValueSuffix(" Volume");
	outputGainSlider.addListener(this);
	// Set properties for the Output Gain Label
	outputGainLabel.setText("Output Volume", NotificationType::dontSendNotification);

	// Set properties for the Pre Sub Gain Slider
	subPreGainSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	subPreGainSlider.setRange(0.0, 1.0, 0.01);
	subPreGainSlider.setSliderSnapsToMousePosition(false);
	subPreGainSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	subPreGainSlider.setTextValueSuffix(" Volume");
	subPreGainSlider.addListener(this);
	// Set properties for the Pre Sub Gain Label
	subPreGainLabel.setText("Sub Pre Gain", NotificationType::dontSendNotification);

	// Set properties for the HPF Frequncy Slider
	hpfFreqSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	hpfFreqSlider.setRange(40, 1000, 1);
	hpfFreqSlider.setSliderSnapsToMousePosition(false);
	hpfFreqSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	hpfFreqSlider.setTextValueSuffix(" Hz");
	hpfFreqSlider.setSkewFactor(0.5);
	hpfFreqSlider.addListener(this);
	// Set properties for the HPF Frequncy Label
	hpfFreqLabel.setText("HPF Frequency", NotificationType::dontSendNotification);

	// Set properties for the LPF Frequncy Slider
	lpfFreqSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	lpfFreqSlider.setRange(60, 1500, 1);
	lpfFreqSlider.setSliderSnapsToMousePosition(false);
	lpfFreqSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	lpfFreqSlider.setTextValueSuffix(" Hz");
	lpfFreqSlider.setSkewFactor(0.5);
	lpfFreqSlider.addListener(this);
	// Set properties for the LPF Frequncy Label
	lpfFreqLabel.setText("LPF Frequency", NotificationType::dontSendNotification);

	// Set properties for the Hysteresis Slider
	hystSlider.setSliderStyle(Slider::RotaryHorizontalVerticalDrag);
	hystSlider.setRange(0, .1f, .001f);
	hystSlider.setSliderSnapsToMousePosition(false);
	hystSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 50, 50);
	hystSlider.addListener(this);
	// Set properties for the LPF Frequncy Label
	hystLabel.setText("Hysteresis", NotificationType::dontSendNotification);

	addAndMakeVisible(&masterBypassButton);
	addAndMakeVisible(&soloSubButton);
	addAndMakeVisible(&inputGainSlider);
	addAndMakeVisible(&inputGainLabel);
	addAndMakeVisible(&outputGainSlider);
	addAndMakeVisible(&outputGainLabel);
	addAndMakeVisible(&subPreGainSlider);
	addAndMakeVisible(&subPreGainLabel);
	addAndMakeVisible(&hpfFreqSlider);
	addAndMakeVisible(&hpfFreqLabel);
	addAndMakeVisible(&lpfFreqSlider);
	addAndMakeVisible(&lpfFreqLabel);
	addAndMakeVisible(&hystSlider);
	addAndMakeVisible(&hystLabel);

	startTimer(50);
}

PrototypeAudioProcessorEditor::~PrototypeAudioProcessorEditor() {
}

//==============================================================================
void PrototypeAudioProcessorEditor::paint (Graphics& g)
{
	// Fill the whole window white
	g.fillAll (Colours::grey);

	// Set the current drawing colour to black
	g.setColour (Colours::black);

	// Set the font size and draw text to the screen
	g.setFont (15.0f);
}

void PrototypeAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
	masterBypassButton.setBounds(100, 250, 100, 40);
	soloSubButton.setBounds(430, 250, 100, 40);
	
	inputGainSlider.setBounds(50, 110, 50, 100);
	inputGainLabel.setBounds(35, 90, 80, 15);
	outputGainSlider.setBounds(550, 110, 50, 100);
	outputGainLabel.setBounds(535, 90, 80, 15);
	subPreGainSlider.setBounds(160, 110, 50, 100);
	subPreGainLabel.setBounds(145, 90, 80, 15);
	hpfFreqSlider.setBounds(265, 160, 50, 100);
	hpfFreqLabel.setBounds(250, 140, 80, 15);
	lpfFreqSlider.setBounds(335, 60, 50, 100);
	lpfFreqLabel.setBounds(320, 40, 80, 15);
	hystSlider.setBounds(445, 110, 50, 100);
	hystLabel.setBounds(430, 90, 80, 15);

}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void PrototypeAudioProcessorEditor::timerCallback() {
	inputGainSlider.setValue(getProcessor().inputGain->getValue(), dontSendNotification);
	outputGainSlider.setValue(getProcessor().outputGain->getValue(), dontSendNotification);
	subPreGainSlider.setValue(getProcessor().subPreGain->getValue(), dontSendNotification);
	hpfFreqSlider.setValue(getProcessor().hpfFreq->getValue(), dontSendNotification);
	lpfFreqSlider.setValue(getProcessor().lpfFreq->getValue(), dontSendNotification);
	masterBypassButton.setToggleState((bool)getProcessor().masterBypass->getValue(), dontSendNotification);
	soloSubButton.setToggleState((bool)getProcessor().soloSub->getValue(), dontSendNotification);
	hystSlider.setValue(getProcessor().hyst->getValue(), dontSendNotification);
}

//==============================================================================
// This is our Slider::Listener callback, when the user drags a slider.
void PrototypeAudioProcessorEditor::sliderValueChanged(Slider *slider) {
	//getProcessor().inputGain = inputGainSlider.getValue();
	//getProcessor().outputGain = outputGainSlider.getValue();

	if (AudioProcessorParameter* param = getParameterFromSlider(slider))
	{
		// It's vital to use setValueNotifyingHost to change any parameters that are automatable
		// by the host, rather than just modifying them directly, otherwise the host won't know
		// that they've changed.
		param->setValueNotifyingHost((float)slider->getValue());
	}
}

void PrototypeAudioProcessorEditor::sliderDragStarted(Slider* slider)
{
	if (AudioProcessorParameter* param = getParameterFromSlider(slider))
	{
		param->beginChangeGesture();
	}
}

void PrototypeAudioProcessorEditor::sliderDragEnded(Slider* slider)
{
	if (AudioProcessorParameter* param = getParameterFromSlider(slider)) {
		param->endChangeGesture();
	}
}

//==============================================================================
// TODO:: make to toggleButtonClicked?
void PrototypeAudioProcessorEditor::buttonClicked(Button* button)
{
	if (AudioProcessorParameter* param = getParameterFromButton(button)) {
		param->setValueNotifyingHost((float)button->getToggleState());
	}
	
}


//==============================================================================
AudioProcessorParameter* PrototypeAudioProcessorEditor::getParameterFromSlider(const Slider* slider) const {
	if (slider == &inputGainSlider) { return getProcessor().inputGain; }
	if (slider == &outputGainSlider) { return getProcessor().outputGain; }
	if (slider == &subPreGainSlider) { return getProcessor().subPreGain; }
	if (slider == &hpfFreqSlider) { return getProcessor().hpfFreq; }
	if (slider == &lpfFreqSlider) { return getProcessor().lpfFreq; }
	if (slider == &hystSlider) { return getProcessor().hyst; }

	return nullptr;
}

AudioProcessorParameter* PrototypeAudioProcessorEditor::getParameterFromButton(const Button* button) const {
	if (button == &masterBypassButton) { return getProcessor().masterBypass; }
	if (button == &soloSubButton) { return getProcessor().soloSub; }
}