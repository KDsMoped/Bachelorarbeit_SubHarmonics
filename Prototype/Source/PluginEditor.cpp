/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
PrototypeAudioProcessorEditor::PrototypeAudioProcessorEditor(PrototypeAudioProcessor& p)
	: AudioProcessorEditor(&p), processor(p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);

	// Set properties for the Output Volume Slider
	outputVolume.setSliderStyle(Slider::LinearBarVertical);
	outputVolume.setRange(0.0, 127.0, 1.0);
	outputVolume.setTextBoxStyle(Slider::NoTextBox, false, 90, 0);
	outputVolume.setPopupDisplayEnabled(true, this);
	outputVolume.setTextValueSuffix(" Volume");
	outputVolume.setValue(1.0);
	outputVolume.addListener(this);

	addAndMakeVisible(&outputVolume);
}

PrototypeAudioProcessorEditor::~PrototypeAudioProcessorEditor()
{
}

//==============================================================================
void PrototypeAudioProcessorEditor::paint (Graphics& g)
{
    // Fill the whole window white
	g.fillAll (Colours::white);

	// Set the current drawing colour to black
	g.setColour (Colours::black);
    
	// Set the font size and draw text to the screen
	g.setFont (15.0f);

    g.drawFittedText ("Output Volume", getLocalBounds(), Justification::centred, 1);
}

void PrototypeAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..

	outputVolume.setBounds(40, 30, 20, getHeight() - 60);
}

void PrototypeAudioProcessorEditor::sliderValueChanged(Slider *slider) {
	processor.outGain = outputVolume.getValue();
}